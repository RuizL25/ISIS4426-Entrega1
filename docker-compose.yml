services:
  db:
    image: postgres:17-alpine3.22
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks: [app-backend]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes"]
    # ports: ["6380:6379"]   # opcional si quieres verlo fuera de docker
    volumes: [redisdata:/data]
    networks: [app-backend]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  asynqmon:
    image: hibiken/asynqmon:latest
    command: ["--redis-addr=redis:6379", "--addr=:8081", "--redis-db=0"]
    ports: ["8081:8081"]
    depends_on:
      redis:
        condition: service_healthy
    networks: [app-backend]

  api:
    build:
      context: ./back
      dockerfile: Dockerfile
      args:
        PKG: .                 # compila main.go en la ra√≠z de back
    image: anb-showcase-backend:api
    container_name: backend
    environment:
      DB_DSN: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      REDIS_ADDR: redis:6379
      PORT: "8080"
    volumes:
      - videodata:/data
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    ports: ["8080:8080"]
    networks: [app-backend]
    restart: unless-stopped

  worker:
    build:
      context: ./back
      dockerfile: Dockerfile
      args:
        PKG: ./cmd/worker      # compila el main.go del worker
    image: anb-showcase-backend:worker
    container_name: worker
    environment:
      DB_DSN: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      REDIS_ADDR: redis:6379
    volumes:
      - videodata:/data
      - ./assets:/assets:ro
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    networks: [app-backend]
    restart: unless-stopped

networks:
  app-backend:

volumes:
  pgdata:
  redisdata:
  videodata:
