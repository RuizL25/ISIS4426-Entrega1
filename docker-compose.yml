services:
  db:
    image: postgres:17-alpine3.22
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks: [app-backend]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    # Opcional: exp√≥n a host si quieres inspeccionarlo fuera de Docker
    # ports: ["6380:6379"]   # host:container
    volumes:
      - redisdata:/data
    networks: [app-backend]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  asynqmon:
    image: hibiken/asynqmon:latest
    command: ["--redis-addr=redis:6379", "--addr=:8081", "--redis-db=0"]
    ports: ["8081:8081"]
    depends_on:
      redis:
        condition: service_healthy
    networks: [app-backend]

  api:
    platform: linux/amd64
    build:
      context: ./back
      dockerfile: Dockerfile.api
    image: anb-showcase-backend:api
    container_name: backend
    environment:
      DB_DSN: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      REDIS_ADDR: redis:6379
      PORT: "8080"
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - videodata:/data         # API guarda /data/uploads
    networks: [app-backend]
    restart: unless-stopped

  worker:
    platform: linux/amd64
    build:
      context: ./back
      dockerfile: Dockerfile.worker
    image: anb-showcase-backend:worker
    container_name: worker
    environment:
      DB_DSN: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      REDIS_ADDR: redis:6379
    volumes:
      - videodata:/data
      - ./assets:/assets:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [app-backend]
    restart: unless-stopped

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile.front
      args:
        VITE_API_BASE_URL: "http://api:8080"
    image: anb-showcase-frontend:latest
    container_name: frontend
    depends_on:
      api:
        condition: service_started
    networks: [app-backend]
    ports:
      - "3000:8080"
    restart: unless-stopped

  sonarqube:
    image: sonarqube:community
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs





networks:
  app-backend:

volumes:
  pgdata:
  redisdata:
  videodata:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
